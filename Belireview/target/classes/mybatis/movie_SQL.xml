<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC " - //mybatis.org//DTD Config 3.0//EN" " http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="movie">

  <select id="selectBoardList" parameterType="hashmap" resultType="hashmap" >
		SELECT
			MOVIE_NO,
			MOVIE_NAME,
			to_char(MOVIE_DATE,'yyyy') as MOVIE_DATE,
			MOVIE_COUNTRY,
			MOVIE_GENRE,
			MOVIE_TOTAL_COUNT,
			MOVIE_DIRECTOR,
			MOVIE_CONTENT,
			MOVIE_RUNNINGTIME,
			MOVIE_READCOUNT,
			MOVIE_POSTER_IMAGE,
			MOVIE_MAIN_IMAGE,
			MOVIE_GALLERY_IMAGE,
			MOVIE_GRADE,
			ROWNUM RNUM FROM 
			(SELECT *
					FROM MOVIE	
				<choose>
				<when test="MOVIE_GENRE !=null">
				 WHERE MOVIE_GENRE LIKE '%'||#{MOVIE_GENRE}||'%' ORDER BY DBMS_RANDOM.RANDOM)
				</when>
				
				<otherwise>
				  ORDER BY DBMS_RANDOM.RANDOM)
				</otherwise>
				</choose>
					 ORDER BY RNUM ASC
   </select>
   
   <select id="totalMovieCount" parameterType="hashmap" resultType="int">
   		SELECT COUNT(*) AS COUNT FROM MOVIE
   </select>
   
   <select id="movieDetail" parameterType="hashmap" resultType="hashmap">
	   	SELECT
	   		MOVIE_NO,
			MOVIE_NAME,
			to_char(MOVIE_DATE,'yyyy') as MOVIE_DATE,
			MOVIE_COUNTRY,
			MOVIE_GENRE,
			MOVIE_TOTAL_COUNT,
			MOVIE_DIRECTOR,
			MOVIE_CONTENT,
			MOVIE_RUNNINGTIME,
			MOVIE_READCOUNT,
			MOVIE_POSTER_IMAGE,
			MOVIE_MAIN_IMAGE,
			MOVIE_GALLERY_IMAGE,
			(SELECT ROUND(AVG(ML_GRADE),1)
			FROM MOVIE_LIKE WHERE MOVIE_LIKE_NO = #{MOVIE_NO} AND ML_GRADE != 0) 
			AS MOVIE_GRADE 
			FROM MOVIE WHERE MOVIE_NO = #{MOVIE_NO}
   </select>
 
   
   <select id="movieActor" parameterType="hashmap" resultType="hashmap">
   		SELECT ACTOR_NAME,ACTOR_IMAGE FROM ACTOR WHERE ACTOR_MOVIE LIKE '%'||#{MOVIE_NAME}||'%'
   </select>
   
   <select id="detailgenre" parameterType="hashmap" resultType="hashmap" >
  <![CDATA[
	SELECT
 			MOVIE_NO,
			MOVIE_NAME,
			MOVIE_DATE,
			MOVIE_COUNTRY,
			MOVIE_GENRE,
			MOVIE_TOTAL_COUNT,
			MOVIE_DIRECTOR,
			MOVIE_CONTENT,
			MOVIE_RUNNINGTIME,
			MOVIE_READCOUNT,
			MOVIE_POSTER_IMAGE,
			MOVIE_MAIN_IMAGE,
			MOVIE_GALLERY_IMAGE,
			MOVIE_GRADE,
			RNUM FROM 
			(
		SELECT
			MOVIE_NO,
			MOVIE_NAME,
			to_char(MOVIE_DATE,'yyyy') as MOVIE_DATE,
			MOVIE_COUNTRY,
			MOVIE_GENRE,
			MOVIE_TOTAL_COUNT,
			MOVIE_DIRECTOR,
			MOVIE_CONTENT,
			MOVIE_RUNNINGTIME,
			MOVIE_READCOUNT,
			MOVIE_POSTER_IMAGE,
			MOVIE_MAIN_IMAGE,
			MOVIE_GALLERY_IMAGE,
			MOVIE_GRADE,
			ROWNUM RNUM FROM 
			(SELECT *
				FROM MOVIE WHERE MOVIE_NO != #{MOVIE_NO} and MOVIE_GENRE = #{MOVIE_GENRE} ORDER BY MOVIE_DATE DESC) ORDER BY RNUM ASC)WHERE RNUM BETWEEN 1 AND 4
		]]>
   </select>
   
   	<select id="existGrade" parameterType="hashmap" resultType="hashmap">
   		select * from movie_like where movie_like_no=#{MOVIE_NO} and id=#{ID}
	</select>
	
	<insert id="addGrade" parameterType="hashmap">
		insert into movie_like values(#{MOVIE_NO},#{ID},#{RATING})
	</insert>
	
	<delete id="updateGrade" parameterType="hashmap">
		update movie_like set ml_grade  =#{RATING} where movie_like_no=#{MOVIE_NO} and id=#{ID}		
	</delete>
	
	<select id="grade" parameterType="hashmap" resultType="int">
   		select count(*) from movie_like where movie_like_no=#{MOVIE_NO}
	</select>
	
	<select id="ratingPrediction" parameterType="hashmap" resultType="double">
		select round(avg(ML_GRADE),1) from movie_like where movie_like_no in (select movie_no from movie where movie_genre=#{MOVIE_GENRE}) and id=#{ID}
	</select>
	
	<update id="updateReadCount" parameterType="hashmap">
		UPDATE MOVIE SET MOVIE_READCOUNT = MOVIE_READCOUNT+1 WHERE MOVIE_NO=#{MOVIE_NO}
	</update>
	
	<update id="updateGrade2" parameterType="hashmap">
		UPDATE MOVIE SET MOVIE_GRADE = (SELECT AVG(ML_GRADE) FROM MOVIE_LIKE WHERE MOVIE_LIKE_NO=#{MOVIE_NO}) WHERE MOVIE_NO=#{MOVIE_NO}
	</update>
	
	<select id="gradeRatio" parameterType="hashmap" resultType="hashmap">
		  with t as(
		  		SELECT '0.5' GRADE, count(*) A FROM movie_like where ML_GRADE=0.5 and movie_like_no=#{MOVIE_NO} UNION ALL
		        SELECT '1' GRADE, count(*) A FROM movie_like where ML_GRADE=1 and movie_like_no=#{movie_NO} UNION ALL
		        SELECT '1.5' GRADE, count(*) A FROM movie_like where ML_GRADE=1.5 and movie_like_no=#{MOVIE_NO} UNION ALL
		        SELECT '2' GRADE, count(*) A FROM movie_like where ML_GRADE=2 and movie_like_no=#{movie_NO} UNION ALL
		        SELECT '2.5' GRADE, count(*) A FROM movie_like where ML_GRADE=2.5 and movie_like_no=#{MOVIE_NO} UNION ALL
		        SELECT '3' GRADE, count(*) A FROM movie_like where ML_GRADE=3 and movie_like_no=#{MOVIE_NO} UNION ALL
		        SELECT '3.5' GRADE, count(*) A FROM movie_like where ML_GRADE=3.5 and movie_like_no=#{MOVIE_NO} UNION ALL
		        SELECT '4' GRADE, count(*) A FROM movie_like where ML_GRADE=4 and movie_like_no=#{MOVIE_NO} UNION ALL
		        SELECT '4.5' GRADE, count(*) A FROM movie_like where ML_GRADE=4.5 and movie_like_no=#{MOVIE_NO} UNION ALL
		        SELECT '5' GRADE, count(*) A FROM movie_like where ML_GRADE=5 and movie_like_no=#{MOVIE_NO}
		  )
		  select 
		    decode(grouping(GRADE),1,'TOTAL',GRADE) as GRADE,
		    TO_CHAR(SUM(A) / SUM(CASE WHEN GROUPING(GRADE) = 0 THEN SUM(A) ELSE 0 END) OVER() * 100, '990.00') AS RATIO
		    FROM t 
		GROUP BY ROLLUP(GRADE)
	</select>

</mapper>